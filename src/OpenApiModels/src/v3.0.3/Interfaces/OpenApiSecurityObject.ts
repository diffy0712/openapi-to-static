/**
 * Defines a security scheme that can be used by the operations.
 * Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter),
 * OAuth2's common flows (implicit, password, client credentials and authorization code) as defined in RFC6749, and OpenID Connect Discovery.
 *
 * @source https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#securitySchemeObject
 */
export interface OpenApiSecuritySchemeObject {
	/**
	 * REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "oauth2", "openIdConnect".
	 */
	type: string;

	/**
	 * A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
	 */
	description?: string;

	/**
	 * REQUIRED. The name of the header, query or cookie parameter to be used.
	 */
	name: string;

	/**
	 * REQUIRED. The location of the API key. Valid values are "query", "header" or "cookie".
	 */
	in: 'query'|'header'|'cookie';

	/**
	 * REQUIRED. The name of the HTTP Authorization scheme to be used
	 * in the Authorization header as defined in RFC7235.
	 * The values used SHOULD be registered in the IANA Authentication Scheme registry.
	 */
	scheme: string;

	/**
	 * A hint to the client to identify how the bearer token is formatted.
	 * Bearer tokens are usually generated by an authorization server,
	 * so this information is primarily for documentation purposes.
	 */
	bearerFormat?: string;

	/**
	 * REQUIRED. An object containing configuration information for the flow types supported.
	 *
	 * TODO: implement OAuth Flows Object
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	flows: any;

	/**
	 * REQUIRED. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL.
	 */
	openIdConnectUrl: string;
}

/**
 * Lists the required security schemes to execute this operation.
 * The name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.
 * Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized.
 * This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.
 * When a list of Security Requirement Objects is defined on the OpenAPI Object or Operation Object, only one of
 * the Security Requirement Objects in the list needs to be satisfied to authorize the request.
 *
 * @source https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#securityRequirementObject
 */
export interface OpenApiSecurityRequirementObject {
	/**
	 * Each name MUST correspond to a security scheme which is declared in
	 * the Security Schemes under the Components Object.
	 * If the security scheme is of type "oauth2" or "openIdConnect",
	 * then the value is a list of scope names required for the execution,
	 * and the list MAY be empty if authorization does not require a specified scope.
	 * For other security scheme types, the array MUST be empty.
	 */
	[name: string]: string[];
}
