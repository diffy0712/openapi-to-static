/**
* This file was generated by OpenApi Typescript Sync cli tool.
*
* Do not edit this file as it might be regenerated.
*/


// eslint-disable-next-line @typescript-eslint/ban-ts-ignore
// @ts-ignore
import Axios, {AxiosRequestConfig, AxiosResponse} from 'axios';
import { LopiNoteApiContractsGetNotesEndpointResponse } from '../Schemas/LopiNoteApiContractsGetNotesEndpointResponse';
import { FastEndpointsErrorResponse } from '../Schemas/FastEndpointsErrorResponse';
import { FastEndpointsEmptyResponse } from '../Schemas/FastEndpointsEmptyResponse';
import { LopiNoteApiContractsCreateNoteEndpointRequest } from '../Schemas/LopiNoteApiContractsCreateNoteEndpointRequest';
import { LopiNoteApiContractsGetNoteEndpointResponse } from '../Schemas/LopiNoteApiContractsGetNoteEndpointResponse';


/**
* 
*/
export const Notes = {
	/**
	 * Get all notes
	 */
	getAllNotes: async (config?: AxiosRequestConfig): Promise<AxiosResponse<LopiNoteApiContractsGetNotesEndpointResponse>> => {
		return Axios.get<LopiNoteApiContractsGetNotesEndpointResponse>(`http://localhost:8081/notes`, config);
	},

	/**
	 * Create a new note
	 */
	createANewNote: async (data: LopiNoteApiContractsCreateNoteEndpointRequest, config?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
		return Axios.post<void>(`http://localhost:8081/notes`, data, config);
	},

	/**
	 * Get a note by id
	 */
	getANoteById: async (systemString: string, config?: AxiosRequestConfig): Promise<AxiosResponse<LopiNoteApiContractsGetNoteEndpointResponse>> => {
		return Axios.get<LopiNoteApiContractsGetNoteEndpointResponse>(`http://localhost:8081/notes/${id}`, config);
	},

	/**
	 * Delete a note by id
	 */
	deleteANoteById: async (systemString: string, config?: AxiosRequestConfig): Promise<AxiosResponse<FastEndpointsEmptyResponse>> => {
		return Axios.delete<FastEndpointsEmptyResponse>(`http://localhost:8081/notes/${id}`, config);
	},

};
